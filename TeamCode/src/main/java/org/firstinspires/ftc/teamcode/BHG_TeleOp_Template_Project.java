package org.firstinspires.ftc.teamcode;

//This is a template to start a new TeleOp OpMode
//Please do not edit this file directly.  Instead, create a new Java Class under TeamCode and copy this into it

//Import Statements Go Here

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;

import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;


@TeleOp(name="Ben's TeleOp Project", group="TeleOp") //Change "AAA_TeleOp_Template" to the name of your OpMode
public class BHG_TeleOp_Template_Project extends OpMode {

    //Declare Variables Here
    private DcMotor leftDrive;
    private DcMotor rightDrive;
    public Servo servo;
    TouchSensor touchSensor;
    DistanceSensor distanceSensor;
    private double servoPosition = 0;
    private boolean rBumperPrev = false;
    private boolean lBumperPrev = false;
    private long startTime = 0;
    private boolean isPaused = false;


    @Override
    public void init() {

        //Code here will be run once when the driver hits INIT
        //This would be a good place to initialize your hardware
        leftDrive = hardwareMap.get(DcMotor.class, "left_drive");
        rightDrive = hardwareMap.get(DcMotor.class, "right_drive");
        servo = hardwareMap.get(Servo.class, "servo");

        servo.setPosition(0);

        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        rightDrive.setDirection(DcMotor.Direction.FORWARD);

        telemetry.addData("Status", "Initialized");
        telemetry.update();
    }

    @Override
    public void loop() {

        //Code here will run in a continuous loop until the driver hits STOP
        //This is where we will enter the things we want the robot to do
        touchSensor = hardwareMap.get(TouchSensor.class, "touchSensor");
        distanceSensor = hardwareMap.get(DistanceSensor.class, "distanceSensor");


        double forward = gamepad1.left_stick_y;
        double turn = gamepad1.left_stick_x;
        double leftPower = forward + turn;
        double rightPower = forward - turn;


        //Ben,in the below, why bother saying "*1"?
        //Also, we should make a habit of ensuring motor speed is never above 1.0
        //A way to do this is to say "leftDrive.setPower(Math.min(leftPower, 1.0))
        //How this works:  Math.min(x,y) always returns the smaller of the two values x or y
        //So, if x (leftPower) is greater than 1.0, it will return 1.0
        //You can do the same thing in reverse with Math.max(x,y), where it will return larger of the two values

        if (gamepad1.left_stick_button) {
            leftDrive.setPower(leftPower * 1);
            rightDrive.setPower(rightPower * 1);
        } else if (gamepad1.right_trigger != 0) {
            leftDrive.setPower(leftPower * 1);
            rightDrive.setPower(rightPower * 1);
        } else {
            leftDrive.setPower(leftPower * 0.5);
            rightDrive.setPower(rightPower * 0.5);
        }
        if (gamepad1.right_bumper && !rBumperPrev) {
            servoPosition += 0.05;
            servoPosition = Math.min(0.3, servoPosition);
        } else if (gamepad1.left_bumper && !lBumperPrev) {
            servoPosition -= 0.05;
            servoPosition = Math.max(0.0, servoPosition); // Ensure servo does not drop below 0.0
        }
        lBumperPrev = gamepad1.left_bumper;
        rBumperPrev = gamepad1.right_bumper;
        servo.setPosition(servoPosition);
        boolean isPressed = touchSensor.isPressed();
        if (isPressed && !isPaused) {
            startTime = System.currentTimeMillis();
            isPaused = true;
        }
        if (isPaused) {
            long elapsedTime = System.currentTimeMillis() - startTime;

            if (elapsedTime < 3000) {
                leftDrive.setPower(0.5);
                rightDrive.setPower(0.5);
            } else {
                leftDrive.setPower(0);
                rightDrive.setPower(0);
                isPaused = false; // Reset the pause state
            }
        }
        double distance = distanceSensor.getDistance(DistanceUnit.INCH);
        if (Double.isNaN(distance)) {
            telemetry.addData("Distance", "Invalid");
            telemetry.update();
        }
        if (distance <= 12) {
            leftDrive.setPower(0);
            rightDrive.setPower(0);

            long pauseStartTime = System.currentTimeMillis();
            while(System.currentTimeMillis() - pauseStartTime < 500) {
                // Just wait for 500ms without calling sleep
            }

            leftDrive.setPower(leftPower * 0.5);
            rightDrive.setPower(rightPower * 0.5);
            distance = distanceSensor.getDistance(DistanceUnit.INCH);
        }

        telemetry.addData("Left Power", leftPower);
        telemetry.addData("Right Power", rightPower);
        telemetry.addData("Servo Position", servoPosition);
        telemetry.addData("Touch Sensor", isPressed ? "PRESSED" : "NOT PRESSED");
        telemetry.addData("Distance", distanceSensor.getDistance(DistanceUnit.INCH));
        telemetry.update();
    }
}