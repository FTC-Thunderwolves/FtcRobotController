package org.firstinspires.ftc.teamcode;

//This is a template to start a new TeleOp OpMode
//Please do not edit this file directly.  Instead, create a new Java Class under TeamCode and copy this into it

//Import Statements Go Here
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;


@TeleOp(name="Ben's TeleOp Project", group="TeleOp") //Change "AAA_TeleOp_Template" to the name of your OpMode
public class BHG_TeleOp_Template_Project extends OpMode {

    //Declare Variables Here
    private DcMotor leftDrive;
    private DcMotor rightDrive;
    public Servo servo;
    private double servoPosition = 0;
    private boolean rBumperPrev = false;
    private boolean lBumperPrev = false;




    @Override
    public void init() {

        //Code here will be run once when the driver hits INIT
        //This would be a good place to initialize your hardware

        leftDrive = hardwareMap.get(DcMotor.class, "left_drive");
        rightDrive = hardwareMap.get(DcMotor.class, "right_drive");
        servo = hardwareMap.get(Servo.class, "servo");

        servo.setPosition(0);

        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        rightDrive.setDirection(DcMotor.Direction.FORWARD);

        telemetry.addData("Status", "Initialized");
        telemetry.update();
    }

    @Override
    public void loop() {

        //Code here will run in a continuous loop until the driver hits STOP
        //This is where we will enter the things we want the robot to do
        double forward = gamepad1.left_stick_y;
        double turn = gamepad1.left_stick_x;
        double leftPower = forward + turn;
        double rightPower = forward - turn;

        if(gamepad1.left_stick_button) {
            leftDrive.setPower(leftPower * 1);
            rightDrive.setPower(rightPower * 1);
        } else {
            leftDrive.setPower(leftPower * 0.5);
            rightDrive.setPower(rightPower * 0.5);
        }
        if(gamepad1.right_bumper && !rBumperPrev) {
            servoPosition += 0.05;
            servoPosition = Math.min(0.3, servoPosition);
        } else if (gamepad1.left_bumper && !lBumperPrev) {
            servoPosition -= 0.05;
            servoPosition = Math.max(0.0, servoPosition); // Ensure servo does not drop below 0.0
        }

        lBumperPrev = gamepad1.left_bumper;
        rBumperPrev = gamepad1.right_bumper;

        servo.setPosition(servoPosition);



        telemetry.addData("Left Power", leftPower);
        telemetry.addData("Right Power", rightPower);
        telemetry.addData("Servo Position", servoPosition);
        telemetry.update();
    }
}